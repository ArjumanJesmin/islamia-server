generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// üìò School Information
//
model School {
  id          String  @id @default(cuid())
  name        String  @default("‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º")
  motto       String  @default("‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ü‡¶≤‡ßã‡¶Ø‡¶º‡ßá ‡¶â‡¶¶‡ßç‡¶≠‡¶æ‡¶∏‡¶ø‡¶§")
  established String  @default("‡ßß‡ßØ‡ß≠‡ß®")
  description String?
  logo        String? @default("/islamia_logo.svg")
  address     String  @default("‡¶ï‡¶≤‡ßá‡¶ú ‡¶∞‡ßã‡¶°, ‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ ‡¶∏‡¶¶‡¶∞, ‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂")
  phone       String  @default("+‡ßÆ‡ßÆ‡ß¶ ‡ßß‡ß®‡ß©‡ß™-‡ß´‡ß¨‡ß≠‡ßÆ‡ßØ")
  email       String  @default("islamiagps@gmail.com")
  website     String?

  admissionStartMonth Int @default(1)
  admissionEndMonth   Int @default(2)
  admissionStartDay   Int @default(1)
  admissionEndDay     Int @default(28)

  // Relations
  announcements Announcement[]
  classes       Class[]
  users         User[]
  admins        Admin[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("schools")
}

//
// üë§ User Authentication & Profiles
//
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          UserRole  @default(PARENT)
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLogin     DateTime?

  // Profile
  profile Profile?

  // Relations
  school   School?   @relation(fields: [schoolId], references: [id])
  schoolId String?
  students Student[]
  admin    Admin?

  Announcement  Announcement[]
  Event         Event[]
  Teacher       Teacher[]
  AdmissionForm AdmissionForm[]
  Attendance    Attendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id          String    @id @default(cuid())
  name        String
  phone       String?
  address     String?
  dateOfBirth DateTime?
  gender      Gender?
  photo       String?

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

//
// üßë‚Äçüíº Admin Model
//
model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String?
  school    School?  @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

//
// üì¢ Announcements
//
model Announcement {
  id          String               @id @default(cuid())
  title       String
  description String
  content     String?
  status      AnnouncementStatus   @default(ACTIVE)
  category    AnnouncementCategory @default(GENERAL)
  image       String?
  startDate   DateTime?
  endDate     DateTime?
  isPublished Boolean              @default(false)

  // Relations
  school   School @relation(fields: [schoolId], references: [id])
  schoolId String
  user     User?  @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

enum AnnouncementStatus {
  ACTIVE
  UPCOMING
  ENDED
  DRAFT
}

enum AnnouncementCategory {
  GENERAL
  EXAM
  HOLIDAY
  EVENT
  URGENT
  ADMISSION
}

//
// üéâ Events
//
model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     String?
  type        EventType @default(ACADEMIC)
  date        DateTime
  endDate     DateTime?
  location    String?
  image       String?
  isPublished Boolean   @default(false)

  organizer   User?   @relation(fields: [organizerId], references: [id])
  organizerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

enum EventType {
  ACADEMIC
  CULTURAL
  SPORTS
  HOLIDAY
  CEREMONY
  ADMISSION
  MEETING
  OTHER
}

//
// üë©‚Äçüè´ Teachers
//
model Teacher {
  id            String  @id @default(cuid())
  name          String
  position      String
  qualification String
  bio           String?
  image         String?
  email         String?
  phone         String?
  displayOrder  Int     @default(0)
  isActive      Boolean @default(true)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teachers")
}

//
// üìÖ Academic Term
//
model AcademicTerm {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  color       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academic_terms")
}

//
// üéì Students
//
model Student {
  id          String      @id @default(cuid())
  studentId   String      @unique
  name        String
  fatherName  String
  motherName  String
  dateOfBirth DateTime
  gender      Gender
  bloodGroup  BloodGroup?
  religion    Religion?
  address     String
  phone       String?
  email       String?

  admissionDate   DateTime
  admissionStatus AdmissionStatus @default(APPLIED)
  admissionYear   Int

  birthCertificate String?
  photo            String?
  previousSchoolTC String?

  class    Class   @relation(fields: [classId], references: [id])
  classId  String
  section  String?
  isActive Boolean @default(true)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  attendances Attendance[]
  results     Result[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

//
// üìù Admission Form
//
model AdmissionForm {
  id           String    @id @default(cuid())
  formNumber   String    @unique
  studentName  String
  fatherName   String
  motherName   String
  dateOfBirth  DateTime
  gender       Gender
  className    ClassName
  address      String
  phone        String
  appliedClass String
  status        AdmissionFormStatus @default(PENDING)
  submittedDate DateTime
  approvedDate  DateTime?
  remarks       String?
  birthCertificate String?
  photo            String?
  submittedBy   User?   @relation(fields: [submittedById], references: [id])
  submittedById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admission_forms")
}

enum ClassName {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
}

//
// üè´ Class Model
//
model Class {
  id        String  @id @default(cuid())
  className String  @unique
  grade     String
  section   String?
  capacity  Int     @default(40)
  room      String?

  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  students  Student[]
  teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  teacherId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

//
// üïí Attendance
//
model Attendance {
  id      String           @id @default(cuid())
  date    DateTime
  status  AttendanceStatus @default(PRESENT)
  remarks String?

  markedBy   User?   @relation(fields: [markedById], references: [id])
  markedById String?
  student    Student @relation(fields: [studentId], references: [id])
  studentId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("attendances")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HOLIDAY
  SICK_LEAVE
}

//
// üìä Results
//
model Result {
  id         String   @id @default(cuid())
  examType   ExamType
  subject    String
  marks      Int
  totalMarks Int      @default(100)
  grade      String?
  remarks    String?
  student    Student @relation(fields: [studentId], references: [id])
  studentId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("results")
}

enum ExamType {
  FIRST_TERM
  SECOND_TERM
  ANNUAL
  CLASS_TEST
  ASSIGNMENT
  PROJECT
}

//
// üî† Enums
//
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Religion {
  ISLAM
  HINDUISM
  CHRISTIANITY
  BUDDHISM
  OTHER
}

enum AdmissionStatus {
  APPLIED
  DOCUMENT_VERIFIED
  APPROVED
  REJECTED
  ENROLLED
  WAITLIST
}

enum AdmissionFormStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WAITLIST
}

//
// üìß Email Subscription
//
model EmailSubscription {
  id       String  @id @default(cuid())
  email    String  @unique
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_subscriptions")
}

//
// üì¨ Contact Messages
//
model ContactMessage {
  id      String        @id @default(cuid())
  name    String
  email   String
  phone   String?
  subject String
  message String
  status  MessageStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

enum MessageStatus {
  PENDING
  READ
  REPLIED
  RESOLVED
  SPAM
}
